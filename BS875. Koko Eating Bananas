import math
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        # k per h = speed
        # if pile < k then eats all
        # so k can be from [1,2,...,max(piles)]
        l,r = 1, max(piles) 

        # do binary search to find min k that piles/k <=h
        res = r
        while l<=r:
            sum =0
            mid = (l+r)//2
            for i in piles:
                sum += math.ceil(i/mid)

            if sum <= h:
                res = min(res, mid)
                r = mid-1
            elif sum > h:
                l = mid+1
        
        return res

