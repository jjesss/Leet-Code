# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # if only one or two in LL return
        if head is None or head.next is None: return head

        # if start with odd then odds first
        # if start with even then evens first
        # can just consider with odd and even indexes using two pointers

        curr = head
        evenhead = head.next

        i=1
        while curr:
            nxt = curr.next
            # if last odd then link to evens start
            if i%2 == 1 and (curr.next is None or curr.next.next is None):
                curr.next = evenhead
            # if last even then link to end
            elif i%2 == 0 and (curr.next is None or curr.next.next is None):
                curr.next = None
            else:
                curr.next = curr.next.next
            i += 1
            curr = nxt
        
        return head
        
