class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        # add speed to pos
        # push furthest to stack, then next
        # if collision, remove top
        # tehn add again
        # put in pairs (position, speed)
        pair = [[p,s] for p,s in zip(position,speed)]
        stack = []
        for p,s in sorted(pair)[::-1]: # reverse the order: 
            # what time itll get to destination
            # t = d/s time is float so /
            stack.append((target-p)/s)
            # if car behind reaches destination before infront
            if len(stack) >=2 and stack[-1] <=stack[-2]:
                stack.pop()
        return len(stack)
